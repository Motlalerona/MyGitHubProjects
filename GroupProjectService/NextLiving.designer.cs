#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GroupProjectService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccomadationBooking(AccomadationBooking instance);
    partial void UpdateAccomadationBooking(AccomadationBooking instance);
    partial void DeleteAccomadationBooking(AccomadationBooking instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertAccomdations(Accomdations instance);
    partial void UpdateAccomdations(Accomdations instance);
    partial void DeleteAccomdations(Accomdations instance);
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertOwner(Owner instance);
    partial void UpdateOwner(Owner instance);
    partial void DeleteOwner(Owner instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccomadationBooking> AccomadationBookings
		{
			get
			{
				return this.GetTable<AccomadationBooking>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Accomdations> Accomdations
		{
			get
			{
				return this.GetTable<Accomdations>();
			}
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Owner> Owners
		{
			get
			{
				return this.GetTable<Owner>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccomadationBookings")]
	public partial class AccomadationBooking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookingId;
		
		private string _BookingDate;
		
		private string _Booking;
		
		private EntitySet<Accomdations> _Accomdations;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookingIdChanging(int value);
    partial void OnBookingIdChanged();
    partial void OnBookingDateChanging(string value);
    partial void OnBookingDateChanged();
    partial void OnBookingChanging(string value);
    partial void OnBookingChanged();
    #endregion
		
		public AccomadationBooking()
		{
			this._Accomdations = new EntitySet<Accomdations>(new Action<Accomdations>(this.attach_Accomdations), new Action<Accomdations>(this.detach_Accomdations));
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="BookingsId", Storage="_BookingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BookingId
		{
			get
			{
				return this._BookingId;
			}
			set
			{
				if ((this._BookingId != value))
				{
					this.OnBookingIdChanging(value);
					this.SendPropertyChanging();
					this._BookingId = value;
					this.SendPropertyChanged("BookingId");
					this.OnBookingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingDate", DbType="VarChar(50)")]
		public string BookingDate
		{
			get
			{
				return this._BookingDate;
			}
			set
			{
				if ((this._BookingDate != value))
				{
					this.OnBookingDateChanging(value);
					this.SendPropertyChanging();
					this._BookingDate = value;
					this.SendPropertyChanged("BookingDate");
					this.OnBookingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Booking", DbType="NChar(10)")]
		public string Booking
		{
			get
			{
				return this._Booking;
			}
			set
			{
				if ((this._Booking != value))
				{
					this.OnBookingChanging(value);
					this.SendPropertyChanging();
					this._Booking = value;
					this.SendPropertyChanged("Booking");
					this.OnBookingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccomadationBooking_Accomdations", Storage="_Accomdations", ThisKey="BookingId", OtherKey="BookingId")]
		public EntitySet<Accomdations> Accomdations
		{
			get
			{
				return this._Accomdations;
			}
			set
			{
				this._Accomdations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_AccomadationBooking", Storage="_Student", ThisKey="BookingId", OtherKey="BookingId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.AccomadationBookings.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.AccomadationBookings.Add(this);
						this._BookingId = value.BookingId;
					}
					else
					{
						this._BookingId = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accomdations(Accomdations entity)
		{
			this.SendPropertyChanging();
			entity.AccomadationBooking = this;
		}
		
		private void detach_Accomdations(Accomdations entity)
		{
			this.SendPropertyChanging();
			entity.AccomadationBooking = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _UserContact;
		
		private string _UserBookings;
		
		private EntitySet<Owner> _Owners;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserContactChanging(string value);
    partial void OnUserContactChanged();
    partial void OnUserBookingsChanging(string value);
    partial void OnUserBookingsChanged();
    #endregion
		
		public Users()
		{
			this._Owners = new EntitySet<Owner>(new Action<Owner>(this.attach_Owners), new Action<Owner>(this.detach_Owners));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserContact", DbType="VarChar(50)")]
		public string UserContact
		{
			get
			{
				return this._UserContact;
			}
			set
			{
				if ((this._UserContact != value))
				{
					this.OnUserContactChanging(value);
					this.SendPropertyChanging();
					this._UserContact = value;
					this.SendPropertyChanged("UserContact");
					this.OnUserContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserBookings", DbType="VarChar(50)")]
		public string UserBookings
		{
			get
			{
				return this._UserBookings;
			}
			set
			{
				if ((this._UserBookings != value))
				{
					this.OnUserBookingsChanging(value);
					this.SendPropertyChanging();
					this._UserBookings = value;
					this.SendPropertyChanged("UserBookings");
					this.OnUserBookingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Owner", Storage="_Owners", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Owner> Owners
		{
			get
			{
				return this._Owners;
			}
			set
			{
				this._Owners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Student", Storage="_Students", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accomdations")]
	public partial class Accomdations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccomadationID;
		
		private string _AccomadationName;
		
		private string _AccomadationLocation;
		
		private System.Nullable<int> _AccomadationRating;
		
		private string _AccomadationFacilities;
		
		private string _AccomadationDescription;
		
		private int _BookingId;
		
		private EntityRef<Owner> _Owner;
		
		private EntityRef<AccomadationBooking> _AccomadationBooking;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccomadationIDChanging(int value);
    partial void OnAccomadationIDChanged();
    partial void OnAccomadationNameChanging(string value);
    partial void OnAccomadationNameChanged();
    partial void OnAccomadationLocationChanging(string value);
    partial void OnAccomadationLocationChanged();
    partial void OnAccomadationRatingChanging(System.Nullable<int> value);
    partial void OnAccomadationRatingChanged();
    partial void OnAccomadationFacilitiesChanging(string value);
    partial void OnAccomadationFacilitiesChanged();
    partial void OnAccomadationDescriptionChanging(string value);
    partial void OnAccomadationDescriptionChanged();
    partial void OnBookingIdChanging(int value);
    partial void OnBookingIdChanged();
    #endregion
		
		public Accomdations()
		{
			this._Owner = default(EntityRef<Owner>);
			this._AccomadationBooking = default(EntityRef<AccomadationBooking>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccomadationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccomadationID
		{
			get
			{
				return this._AccomadationID;
			}
			set
			{
				if ((this._AccomadationID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccomadationIDChanging(value);
					this.SendPropertyChanging();
					this._AccomadationID = value;
					this.SendPropertyChanged("AccomadationID");
					this.OnAccomadationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccomadationName", DbType="VarChar(50)")]
		public string AccomadationName
		{
			get
			{
				return this._AccomadationName;
			}
			set
			{
				if ((this._AccomadationName != value))
				{
					this.OnAccomadationNameChanging(value);
					this.SendPropertyChanging();
					this._AccomadationName = value;
					this.SendPropertyChanged("AccomadationName");
					this.OnAccomadationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccomadationLocation", DbType="VarChar(50)")]
		public string AccomadationLocation
		{
			get
			{
				return this._AccomadationLocation;
			}
			set
			{
				if ((this._AccomadationLocation != value))
				{
					this.OnAccomadationLocationChanging(value);
					this.SendPropertyChanging();
					this._AccomadationLocation = value;
					this.SendPropertyChanged("AccomadationLocation");
					this.OnAccomadationLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccomadationRating", DbType="Int")]
		public System.Nullable<int> AccomadationRating
		{
			get
			{
				return this._AccomadationRating;
			}
			set
			{
				if ((this._AccomadationRating != value))
				{
					this.OnAccomadationRatingChanging(value);
					this.SendPropertyChanging();
					this._AccomadationRating = value;
					this.SendPropertyChanged("AccomadationRating");
					this.OnAccomadationRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccomadationFacilities", DbType="VarChar(50)")]
		public string AccomadationFacilities
		{
			get
			{
				return this._AccomadationFacilities;
			}
			set
			{
				if ((this._AccomadationFacilities != value))
				{
					this.OnAccomadationFacilitiesChanging(value);
					this.SendPropertyChanging();
					this._AccomadationFacilities = value;
					this.SendPropertyChanged("AccomadationFacilities");
					this.OnAccomadationFacilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccomadationDescription", DbType="VarChar(50)")]
		public string AccomadationDescription
		{
			get
			{
				return this._AccomadationDescription;
			}
			set
			{
				if ((this._AccomadationDescription != value))
				{
					this.OnAccomadationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AccomadationDescription = value;
					this.SendPropertyChanged("AccomadationDescription");
					this.OnAccomadationDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingId")]
		public int BookingId
		{
			get
			{
				return this._BookingId;
			}
			set
			{
				if ((this._BookingId != value))
				{
					if (this._AccomadationBooking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookingIdChanging(value);
					this.SendPropertyChanging();
					this._BookingId = value;
					this.SendPropertyChanged("BookingId");
					this.OnBookingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Accomdations", Storage="_Owner", ThisKey="AccomadationID", OtherKey="AccomadationID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Accomdations.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Accomdations.Add(this);
						this._AccomadationID = value.AccomadationID;
					}
					else
					{
						this._AccomadationID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccomadationBooking_Accomdations", Storage="_AccomadationBooking", ThisKey="BookingId", OtherKey="BookingId", IsForeignKey=true)]
		public AccomadationBooking AccomadationBooking
		{
			get
			{
				return this._AccomadationBooking.Entity;
			}
			set
			{
				AccomadationBooking previousValue = this._AccomadationBooking.Entity;
				if (((previousValue != value) 
							|| (this._AccomadationBooking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccomadationBooking.Entity = null;
						previousValue.Accomdations.Remove(this);
					}
					this._AccomadationBooking.Entity = value;
					if ((value != null))
					{
						value.Accomdations.Add(this);
						this._BookingId = value.BookingId;
					}
					else
					{
						this._BookingId = default(int);
					}
					this.SendPropertyChanged("AccomadationBooking");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdminId;
		
		private string _AdminPassword;
		
		private string _AdminUsername;
		
		private EntitySet<Owner> _Owners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdminIdChanging(int value);
    partial void OnAdminIdChanged();
    partial void OnAdminPasswordChanging(string value);
    partial void OnAdminPasswordChanged();
    partial void OnAdminUsernameChanging(string value);
    partial void OnAdminUsernameChanged();
    #endregion
		
		public Admin()
		{
			this._Owners = new EntitySet<Owner>(new Action<Owner>(this.attach_Owners), new Action<Owner>(this.detach_Owners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AdminId
		{
			get
			{
				return this._AdminId;
			}
			set
			{
				if ((this._AdminId != value))
				{
					this.OnAdminIdChanging(value);
					this.SendPropertyChanging();
					this._AdminId = value;
					this.SendPropertyChanged("AdminId");
					this.OnAdminIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminPassword", DbType="VarChar(50)")]
		public string AdminPassword
		{
			get
			{
				return this._AdminPassword;
			}
			set
			{
				if ((this._AdminPassword != value))
				{
					this.OnAdminPasswordChanging(value);
					this.SendPropertyChanging();
					this._AdminPassword = value;
					this.SendPropertyChanged("AdminPassword");
					this.OnAdminPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminUsername", DbType="VarChar(50)")]
		public string AdminUsername
		{
			get
			{
				return this._AdminUsername;
			}
			set
			{
				if ((this._AdminUsername != value))
				{
					this.OnAdminUsernameChanging(value);
					this.SendPropertyChanging();
					this._AdminUsername = value;
					this.SendPropertyChanged("AdminUsername");
					this.OnAdminUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_Owner", Storage="_Owners", ThisKey="AdminId", OtherKey="AdminId")]
		public EntitySet<Owner> Owners
		{
			get
			{
				return this._Owners;
			}
			set
			{
				this._Owners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.Admin = this;
		}
		
		private void detach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.Admin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Owner")]
	public partial class Owner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerID;
		
		private string _OwnerName;
		
		private string _OwnerContact;
		
		private int _AccomadationID;
		
		private int _UserId;
		
		private int _AdminId;
		
		private EntitySet<Accomdations> _Accomdations;
		
		private EntityRef<Admin> _Admin;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnOwnerNameChanging(string value);
    partial void OnOwnerNameChanged();
    partial void OnOwnerContactChanging(string value);
    partial void OnOwnerContactChanged();
    partial void OnAccomadationIDChanging(int value);
    partial void OnAccomadationIDChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnAdminIdChanging(int value);
    partial void OnAdminIdChanged();
    #endregion
		
		public Owner()
		{
			this._Accomdations = new EntitySet<Accomdations>(new Action<Accomdations>(this.attach_Accomdations), new Action<Accomdations>(this.detach_Accomdations));
			this._Admin = default(EntityRef<Admin>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerName", DbType="VarChar(50)")]
		public string OwnerName
		{
			get
			{
				return this._OwnerName;
			}
			set
			{
				if ((this._OwnerName != value))
				{
					this.OnOwnerNameChanging(value);
					this.SendPropertyChanging();
					this._OwnerName = value;
					this.SendPropertyChanged("OwnerName");
					this.OnOwnerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerContact", DbType="VarChar(50)")]
		public string OwnerContact
		{
			get
			{
				return this._OwnerContact;
			}
			set
			{
				if ((this._OwnerContact != value))
				{
					this.OnOwnerContactChanging(value);
					this.SendPropertyChanging();
					this._OwnerContact = value;
					this.SendPropertyChanged("OwnerContact");
					this.OnOwnerContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccomadationID")]
		public int AccomadationID
		{
			get
			{
				return this._AccomadationID;
			}
			set
			{
				if ((this._AccomadationID != value))
				{
					this.OnAccomadationIDChanging(value);
					this.SendPropertyChanging();
					this._AccomadationID = value;
					this.SendPropertyChanged("AccomadationID");
					this.OnAccomadationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminId", DbType="Int NOT NULL")]
		public int AdminId
		{
			get
			{
				return this._AdminId;
			}
			set
			{
				if ((this._AdminId != value))
				{
					if (this._Admin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminIdChanging(value);
					this.SendPropertyChanging();
					this._AdminId = value;
					this.SendPropertyChanged("AdminId");
					this.OnAdminIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Accomdations", Storage="_Accomdations", ThisKey="AccomadationID", OtherKey="AccomadationID")]
		public EntitySet<Accomdations> Accomdations
		{
			get
			{
				return this._Accomdations;
			}
			set
			{
				this._Accomdations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_Owner", Storage="_Admin", ThisKey="AdminId", OtherKey="AdminId", IsForeignKey=true)]
		public Admin Admin
		{
			get
			{
				return this._Admin.Entity;
			}
			set
			{
				Admin previousValue = this._Admin.Entity;
				if (((previousValue != value) 
							|| (this._Admin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Admin.Entity = null;
						previousValue.Owners.Remove(this);
					}
					this._Admin.Entity = value;
					if ((value != null))
					{
						value.Owners.Add(this);
						this._AdminId = value.AdminId;
					}
					else
					{
						this._AdminId = default(int);
					}
					this.SendPropertyChanged("Admin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Owner", Storage="_Users", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Owners.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Owners.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accomdations(Accomdations entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Accomdations(Accomdations entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentId;
		
		private string _StudentName;
		
		private string _StudentSurname;
		
		private int _BookingId;
		
		private System.Nullable<int> _UserId;
		
		private EntitySet<AccomadationBooking> _AccomadationBookings;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnStudentNameChanging(string value);
    partial void OnStudentNameChanged();
    partial void OnStudentSurnameChanging(string value);
    partial void OnStudentSurnameChanged();
    partial void OnBookingIdChanging(int value);
    partial void OnBookingIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public Student()
		{
			this._AccomadationBookings = new EntitySet<AccomadationBooking>(new Action<AccomadationBooking>(this.attach_AccomadationBookings), new Action<AccomadationBooking>(this.detach_AccomadationBookings));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="VarChar(50)")]
		public string StudentName
		{
			get
			{
				return this._StudentName;
			}
			set
			{
				if ((this._StudentName != value))
				{
					this.OnStudentNameChanging(value);
					this.SendPropertyChanging();
					this._StudentName = value;
					this.SendPropertyChanged("StudentName");
					this.OnStudentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentSurname", DbType="VarChar(50)")]
		public string StudentSurname
		{
			get
			{
				return this._StudentSurname;
			}
			set
			{
				if ((this._StudentSurname != value))
				{
					this.OnStudentSurnameChanging(value);
					this.SendPropertyChanging();
					this._StudentSurname = value;
					this.SendPropertyChanged("StudentSurname");
					this.OnStudentSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingId", DbType="Int")]
		public int BookingId
		{
			get
			{
				return this._BookingId;
			}
			set
			{
				if ((this._BookingId != value))
				{
					this.OnBookingIdChanging(value);
					this.SendPropertyChanging();
					this._BookingId = value;
					this.SendPropertyChanged("BookingId");
					this.OnBookingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_AccomadationBooking", Storage="_AccomadationBookings", ThisKey="BookingId", OtherKey="BookingId")]
		public EntitySet<AccomadationBooking> AccomadationBookings
		{
			get
			{
				return this._AccomadationBookings;
			}
			set
			{
				this._AccomadationBookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Student", Storage="_Users", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccomadationBookings(AccomadationBooking entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_AccomadationBookings(AccomadationBooking entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
}
#pragma warning restore 1591
